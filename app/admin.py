from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter, Filter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from collections import defaultdict

from app.database.requests import deduct_all_expenses, add_money_to_company, get_users, update_monthly_expenses, get_user_with_business, increase_prices_by_15_percent, get_business_by_id
from app.keyboards import admin_keyboard



ADMIN_ID = [753755508, 382900778, 1290399251]
# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


admin = Router()



class AddMoney(StatesGroup):
    awaiting_business_id = State()
    awaiting_amount = State()


class RemoveMoney(StatesGroup):
    awaiting_business_id = State()
    awaiting_amount = State()

class UpdateExpenses(StatesGroup):
    awaiting_business_id = State()
    awaiting_new_expenses = State()


class Admin(Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in ADMIN_ID



@admin.message(Admin(), Command("admin"))
async def admin_start(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard()
    )


@admin.callback_query(Admin(), F.data == "deduct_expenses")
async def deduct_expenses(callback: CallbackQuery):
    """–°–ø–∏—Å—ã–≤–∞–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∏—Ö."""
    total_deducted = await deduct_all_expenses()
    users = await get_users()

    for user in users:
        if user.business:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.bot.send_message(
                    chat_id=user.tg_id,
                    text=f"–° –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ '{user.business.name}' —Å–ø–∏—Å–∞–Ω—ã –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –≤ —Ä–∞–∑–º–µ—Ä–µ {user.business.expenses} —Ä—É–±–ª–µ–π."
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}: {e}")

    await callback.message.answer(f"–°–ø–∏—Å–∞–Ω—ã –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É {total_deducted} —Ä—É–±–ª–µ–π.")
        



@admin.callback_query(Admin(), F.data == "add_money")
async def add_money_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥ –∫–æ–º–ø–∞–Ω–∏–∏."""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–ø–∞–Ω–∏–∏:")
    await state.set_state(AddMoney.awaiting_business_id)


@admin.message(Admin(), StateFilter(AddMoney.awaiting_business_id))
async def process_business_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –∫–æ–º–ø–∞–Ω–∏–∏."""
    try:
        business_id = int(message.text)
        if business_id <= 0:
            raise ValueError

        await state.update_data(business_id=business_id)
        await message.answer(f"ID –∫–æ–º–ø–∞–Ω–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {business_id} –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ \n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
        await state.set_state(AddMoney.awaiting_amount)

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∫–æ–º–ø–∞–Ω–∏–∏.")



@admin.message(Admin(), StateFilter(AddMoney.awaiting_amount))
async def process_add_money(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏."""
    data = await state.get_data()
    business_id = data.get("business_id")
    business = await get_business_by_id(business_id)

    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏
        await add_money_to_company(business_id, amount)
        

        if business and business.users:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É –±–∏–∑–Ω–µ—Å–∞
            owner = business.users[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏
                await message.bot.send_message(
                    chat_id=owner.tg_id,
                    text=f"üí∞ –ù–∞ —Å—á–µ—Ç –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ '{business.name}' –ø–æ—Å—Ç—É–ø–∏–ª–æ {amount} —Ä—É–±–ª–µ–π."
                )
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {owner.tg_id}: {e}")
        else:
            await message.answer(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –£ –∫–æ–º–ø–∞–Ω–∏–∏ —Å ID {business_id} –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.")
        await message.answer(f"–ö–æ–º–ø–∞–Ω–∏–∏ {business.name} –ø–æ–ª—É—á–∏–ª–∞ {amount} —Ä—É–±–ª–µ–π")
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")



@admin.callback_query(Admin(), F.data == "remove_money")
async def remove_money_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–Ω—è—Ç–∏—è –¥–µ–Ω–µ–≥ —Å –∫–æ–º–ø–∞–Ω–∏–∏."""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–ø–∞–Ω–∏–∏:")
    await state.set_state(RemoveMoney.awaiting_business_id)


@admin.message(Admin(), StateFilter(RemoveMoney.awaiting_business_id))
async def process_business_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –∫–æ–º–ø–∞–Ω–∏–∏."""
    try:
        business_id = int(message.text)
        if business_id <= 0:
            raise ValueError

        await state.update_data(business_id=business_id)
        await message.answer(f"ID –∫–æ–º–ø–∞–Ω–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {business_id} –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ \n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è:")
        await state.set_state(RemoveMoney.awaiting_amount)

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∫–æ–º–ø–∞–Ω–∏–∏.")


@admin.message(Admin(), StateFilter(RemoveMoney.awaiting_amount))
async def process_remove_money(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è —Å–Ω—è—Ç–∏—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏."""
    data = await state.get_data()
    business_id = data.get("business_id")
    business = await get_business_by_id(business_id)

    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError

        # –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å–æ —Å—á–µ—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        await remove_money_from_company(business_id, amount)

        if business and business.users:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É –±–∏–∑–Ω–µ—Å–∞
            owner = business.users[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏
                await message.bot.send_message(
                    chat_id=owner.tg_id,
                    text=f"üí∞ –°–æ —Å—á–µ—Ç–∞ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ '{business.name}' –±—ã–ª–æ —Å–Ω—è—Ç–æ {amount} —Ä—É–±–ª–µ–π."
                )
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {owner.tg_id}: {e}")
        else:
            await message.answer(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –£ –∫–æ–º–ø–∞–Ω–∏–∏ —Å ID {business_id} –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.")
        await message.answer(f"–° –∫–æ–º–ø–∞–Ω–∏–∏ {business.name} –±—ã–ª–æ —Å–Ω—è—Ç–æ {amount} —Ä—É–±–ª–µ–π")
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")


@admin.callback_query(Admin(), F.data == "update_expenses")
async def update_expenses_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç."""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –±–∏–∑–Ω–µ—Å–∞:")
    await state.set_state(UpdateExpenses.awaiting_business_id)


@admin.message(Admin(), StateFilter(UpdateExpenses.awaiting_business_id))
async def process_business_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –±–∏–∑–Ω–µ—Å–∞."""
    try:
        business_id = int(message.text)
        await state.update_data(business_id=business_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç:")
        await state.set_state(UpdateExpenses.awaiting_new_expenses)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –±–∏–∑–Ω–µ—Å–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")


@admin.message(Admin(), StateFilter(UpdateExpenses.awaiting_new_expenses))
async def process_new_expenses(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Å—É–º–º—ã –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç."""
    try:
        new_expenses = int(message.text)
        if new_expenses < 0:
            raise ValueError

        data = await state.get_data()
        business_id = data.get("business_id")

        await update_monthly_expenses(business_id, new_expenses)
        await message.answer(f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ —Å ID {business_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {new_expenses} —Ä—É–±–ª–µ–π.")
        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∑–∞—Ç—Ä–∞—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 0).")



@admin.callback_query(Admin(), F.data == "create_report")
async def create_report(callback: CallbackQuery):
    """–î–µ–ª–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ç–µ–∫—É—â–µ–º—É –±–∞–ª–∞–Ω—Å—É –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π"""

    users = await get_users()

    if not users:
        await callback.message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    companies = []
    business_summary = defaultdict(list)

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –±–∏–∑–Ω–µ—Å–∞
    for user in users:
        if user.business:  
            name = user.business.name
            business_type = user.business.type
            budget = user.business.budget
            income = user.business.income
            cost = user.business.cost
            profit = income - cost  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–æ—Ö–æ–¥–æ–º –∏ —Ä–∞—Å—Ö–æ–¥–æ–º

            companies.append((name, business_type, budget, income, cost, profit))
            business_summary[business_type].append((name, budget, income, cost, profit))  # –î–æ–±–∞–≤–ª—è–µ–º –ö–û–†–¢–ï–ñ–ò

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ø—Ä–∏–±—ã–ª–∏ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    companies.sort(key=lambda x: x[4], reverse=True)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞: –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ø—Ä–∏–±—ã–ª–∏
    report = "üè¢ –í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ø—Ä–∏–±—ã–ª–∏ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É):\n\n"
    for idx, (name, business_type, budget, income, cost, profit) in enumerate(companies, 1):
        report += f"{idx}. {name} ({business_type}) ‚Äî üí∞ –ë—é–¥–∂–µ—Ç: {budget} ‚ÇΩ,\n üíµ –î–æ—Ö–æ–¥: {income} ‚ÇΩ, üìâ –†–∞—Å—Ö–æ–¥: {cost} ‚ÇΩ, üìä –ü—Ä–∏–±—ã–ª—å: {profit} ‚ÇΩ\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –±–∏–∑–Ω–µ—Å–∞
    report += "\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –±–∏–∑–Ω–µ—Å–∞:\n\n"
    for business_type, businesses in business_summary.items():
        total_income = sum(income for _, _, income, _, _ in businesses)
        total_cost = sum(cost for _, _, _, cost, _ in businesses)
        total_budget = sum(budget for _, budget, _, _, _ in businesses)        
        avg_budget = total_budget // len(businesses)
        total_profit = total_income - total_cost


        report += (f"{business_type}\n"
                   f"üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π: {len(businesses)}\n"
                   f"üíµ –û–±—â–∏–π –±—é–¥–∂–µ—Ç: {total_budget} ‚ÇΩ\n"
                   f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income} ‚ÇΩ\n"
                   f"üìâ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {total_cost} ‚ÇΩ\n"
                   f"üìä –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit} ‚ÇΩ\n"
                   f"üè¢ –ö–æ–º–ø–∞–Ω–∏–∏:\n")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for name, budget, income, cost, profit in sorted(businesses, key=lambda x: x[4], reverse=True):
            report += f"   - {name}:  üí∞ –ë—é–¥–∂–µ—Ç: {budget} ‚ÇΩ, üíµ –î–æ—Ö–æ–¥: {income} ‚ÇΩ, üìâ –†–∞—Å—Ö–æ–¥: {cost} ‚ÇΩ, üìä –ü—Ä–∏–±—ã–ª—å: {profit} ‚ÇΩ\n"  
        report += "\n"  # –û—Ç–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    await callback.message.answer(report)



@admin.callback_query(Admin(), F.data == "inflation")
async def update_expenses_start(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ 15%."""
    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ü–µ–Ω—ã –Ω–∞ 15%
        updated_items_count = await increase_prices_by_15_percent()
        await callback.message.answer(f"‚úÖ –¶–µ–Ω—ã –Ω–∞ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ 15%. –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {updated_items_count}.")
    except Exception as e:
        await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")